build: false
environment:
    PYTHON: "C:\\Python27"
    PYTHON_VERSION: "2.7.8"
    PYTHON_ARCH: "32"
    RUST_BACKTRACE: 1
    OPENSSL_INCLUDE_DIR: C:\OpenSSL\include
    OPENSSL_LIB_DIR: C:\OpenSSL\lib
    OPENSSL_LIBS: ssleay32:libeay32:gdi32:User32
configuration: Release

platform:
- x64
- x86

#We install nasm in case libjpeg-turbo has to be built from source
install:
  - echo APPVEYOR_API_URL=%APPVEYOR_API_URL%
  - echo APPVEYOR_ACCOUNT_NAME=%APPVEYOR_ACCOUNT_NAME%
  - echo APPVEYOR_PROJECT_ID=%APPVEYOR_PROJECT_ID%
  - echo APPVEYOR_PROJECT_NAME=%APPVEYOR_PROJECT_NAME%
  - echo APPVEYOR_PROJECT_SLUG=%APPVEYOR_PROJECT_SLUG%
  - echo APPVEYOR_BUILD_FOLDER=%APPVEYOR_BUILD_FOLDER%
  - echo APPVEYOR_BUILD_ID=%APPVEYOR_BUILD_ID%
  - echo APPVEYOR_BUILD_NUMBER=%APPVEYOR_BUILD_NUMBER%
  - echo APPVEYOR_BUILD_VERSION=%APPVEYOR_BUILD_VERSION%
  - echo APPVEYOR_PULL_REQUEST_NUMBER=%APPVEYOR_PULL_REQUEST_NUMBER%
  - echo APPVEYOR_PULL_REQUEST_TITLE=%APPVEYOR_PULL_REQUEST_TITLE%
  - echo APPVEYOR_JOB_ID=%APPVEYOR_JOB_ID%
  - echo APPVEYOR_JOB_NAME=%APPVEYOR_JOB_NAME%
  - echo APPVEYOR_REPO_PROVIDER=%APPVEYOR_REPO_PROVIDER%
  - echo APPVEYOR_REPO_SCM=%APPVEYOR_REPO_SCM%
  - echo APPVEYOR_REPO_NAME=%APPVEYOR_REPO_NAME%
  - echo APPVEYOR_REPO_BRANCH=%APPVEYOR_REPO_BRANCH%
  - echo APPVEYOR_REPO_TAG=%APPVEYOR_REPO_TAG%
  - echo APPVEYOR_REPO_TAG_NAME=%APPVEYOR_REPO_TAG_NAME%
  - echo APPVEYOR_REPO_COMMIT=%APPVEYOR_REPO_COMMIT%
  - if "%PLATFORM%"=="x86" SET RUST_TARGET=i686-pc-windows-msvc
  - if "%PLATFORM%"=="x64" SET RUST_TARGET=x86_64-pc-windows-msvc
  - if "%PLATFORM%"=="x86" SET BITS=32
  - if "%PLATFORM%"=="x64" SET BITS=64
  - curl -L -o openssl.exe "https://s3-us-west-2.amazonaws.com/imageflow-resources/tools/Win%BITS%OpenSSL-1_0_2j.exe"
  - openssl.exe /SILENT /VERYSILENT /SP- /DIR="C:\OpenSSL"
  - SET RUST_ARTIFACT=2016-11-03/rust-nightly-%RUST_TARGET%.exe
  - curl -L -o nasminst.exe http://libgd.blob.core.windows.net/nasm/nasm-2.07-installer.exe
  - start /wait nasminst.exe /S
  - echo Fetching https://static.rust-lang.org/dist/%RUST_ARTIFACT%
  - curl -L -o  install_rust.exe https://static.rust-lang.org/dist/%RUST_ARTIFACT%
  - install_rust.exe /VERYSILENT /NORESTART /DIR="C:\Program Files (x86)\Rust"
  - set PATH=%PATH%;%PYTHON%/Scripts/;C:\Program Files (x86)\nasm;C:\Program Files (x86)\Rust\bin
  - pip.exe install conan
  - conan user # It creates the conan data directory

test_script:
  - echo %PATH%
  - conan --version
  - cmake --version
  - rustc -V
  - cargo -V
  - nasm -v
  - cd c_components
  - mkdir build
  - cd build
  - if "%PLATFORM%"=="x86" set CONAN_ARCH=x86
  - if "%PLATFORM%"=="x64" set CONAN_ARCH=x86_64
  - SET PATH=%PATH%;C:\MinGW\bin
  - conan install --scope build_tests=True -o shared=True --build missing -s build_type=Release -s arch=%CONAN_ARCH%  -u ../
  - conan build ../
  - cd ..
  - conan export imazen/testing
  - cd ..
  - cd imageflow_core
  - conan install --build missing -s build_type=Release -s arch=%CONAN_ARCH%
  - cargo test
  - cargo build --target=%RUST_TARGET% --release
  - cargo doc --no-deps
  - cd ..
  - cd imageflow_server
  - cargo test
  - cargo build --target=%RUST_TARGET% --release
  - cargo doc --no-deps
  - cd ..
  - cd imageflow_tool
  - cargo test
  - cargo build --target=%RUST_TARGET% --release
  - cargo doc --no-deps
  - cd ..
  - cd imageflow_abi
  - cargo test
  - cargo build --target=%RUST_TARGET% --release
  - cargo doc --no-deps
  - cd ..
  - mkdir artifacts
  - mkdir artifacts\staging
  - mkdir artifacts\staging\doc
  - mkdir artifacts\staging\headers
  - dir target\%RUST_TARGET%\release\
  - xcopy /Y target\%RUST_TARGET%\release\flow-proto1.exe  artifacts\staging\
  - xcopy /Y target\%RUST_TARGET%\release\imageflow_server.exe  artifacts\staging\
  - xcopy /Y target\%RUST_TARGET%\release\imageflow.dll  artifacts\staging\
  - xcopy /Y target\%RUST_TARGET%\release\imageflow_tool.exe  artifacts\staging\
  - xcopy /Y bindings\headers\*.h  artifacts\staging\headers
  - xcopy /Y /E target\doc  artifacts\staging\doc
  - cd artifacts\staging
  - set ARTIFACT_NAME="imageflow-%APPVEYOR_REPO_BRANCH%-appveyorjob-%APPVEYOR_BUILD_NUMBER%-%APPVEYOR_REPO_COMMIT%-%PLATFORM%.zip"
  - 7z a -r "..\..\%ARTIFACT_NAME%.zip" *
  - cd ..\..
  - appveyor PushArtifact "%ARTIFACT_NAME%.zip"


artifacts:
  - path: 'artifacts/*'
    name: Rust binaries


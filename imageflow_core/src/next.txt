
3. Document JSON API for comment
3. Modify I/O API around ownership - use an enum instead of a pointer.
4. Move C to subfolder
5. Drop unused C dependencies, like libcurl.
4. Validate nodes/inputs/outputs

Create backend-agnostic Client API (takes binary blobs online). It can use FFI, server, or command-line tool.


Refine the JSON API

Reconsider graph_recording design
Reconsider no_gamma_correction flag placement

Create constraint node
https://github.com/riapi/riapi/blob/master/level-1.md
width/height/mode/scale/anchor

We may drop camelCase/snake_case

------------------

Port visual helpers to Rust and add upload support


Move C to a subfolder, change component names to be clearer

Give nodes a validate function.

Validate input/output edges

Give nodes a document/permute function.

Put all graph recording results in a graph_recording subfolder

Implement builtin off-by-one comparison nodes with json and image output

Verify input/output node quantities are validated
Check for cycles
Test pulling from a decoder into several different nodes

Smoke tests with dimension verification

Roundtrip and compare various things (like flips)

Don't panic on bad JSON or input; return a Result, and get it right.

It's okay to panic on OOM, but catch it

Ideas for later:

We probably need a way for clients to hint they're going to reuse an input soon

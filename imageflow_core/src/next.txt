

4. Move C to subfolder, rename imageflowrs to libimageflow
4. Validate nodes/inputs/outputs

Define error handling convention

Rust panic sources
* OOM panics, but we want to rescue it.
* Some invalid input will panic (most, until later in development)
* Bugs should panic (but some may fail Result instead)

Context error sources:
* OOM
* I/O error
* Not implemented
* Invalid/null argument, invalid dimensions/format, other invalid args
* Encoding/decoding failed
* Item does not exist

Rust error sources:
* JSON parsing error
* Node validation
* Graph validation
* lots of other things

Constraints:
* Panics must *always* be caught at the FFI boundary
* Panics and unwinding are expensive, and should never happen in normal situations.

Hacks
* We can change the value Panics-on-OOM provide, to treat them differently.
* backtrace-rs lets us resolve symbols/filenames/line numbers directly.


Thoughts:
Mirror JSON and Context error data, always. If a message doesn't have a successful response, they need to call
clear_error. We can probably condense status codes, though.


Create backend-agnostic Client API (takes binary blobs online). It can use FFI, server, or command-line tool.


Refine the JSON API

Reconsider graph_recording design
Reconsider no_gamma_correction flag placement

Create constraint node
https://github.com/riapi/riapi/blob/master/level-1.md
width/height/mode/scale/anchor

We may drop camelCase/snake_case

------------------

Port visual helpers to Rust and add upload support


Move C to a subfolder, change component names to be clearer

Give nodes a validate function.

Validate input/output edges

Give nodes a document/permute function.

Put all graph recording results in a graph_recording subfolder

Implement builtin off-by-one comparison nodes with json and image output

Verify input/output node quantities are validated
Check for cycles
Test pulling from a decoder into several different nodes

Smoke tests with dimension verification

Roundtrip and compare various things (like flips)

Don't panic on bad JSON or input; return a Result, and get it right.

It's okay to panic on OOM, but catch it

Ideas for later:

We probably need a way for clients to hint they're going to reuse an input soon
